"use client";
// TRANG: Bảng demo có điều hướng bằng bàn phím & cơ chế dual-state
import React from "react";
import { Table, Switch } from "antd";
import type { ColumnsType } from "antd/es/table";
// UI INPUTS: Các ô editable với Enter=ghi, Tab=hoàn tác, Blur=ghi
import { EditableCell, MoneyEditable, NumericEditable, NavigationContext } from "./EditableCells";
// UI INPUT (stacked): Ô mô tả quản lý nhiều cặp name:value
import DescriptionCell, { DescriptionItem } from "./DescriptionCell";

type Row = {
  key: string | number;
  unit?: string;
  quantity?: number;
  chanel?: number;
  unitPrice?: number;
  tax?: number;
  waranty?: string;
  deliveryTime?: string;
  itemDescriptions?: DescriptionItem[];
};

const initialRows: Row[] = Array.from({ length: 5 }).map((_, i) => ({
  key: i + 1,
  unit: "pcs",
  quantity: 1,
  chanel: 0,
  unitPrice: 100,
  tax: 10,
  waranty: "12m",
  deliveryTime: "7",
  itemDescriptions: [
    { name: "Power", value: "100W" },
    { name: "CRI", value: "90" },
    { name: "CCT", value: "4000K" },
  ],
}));

export default function Home() {
  const [rows, setRows] = React.useState<Row[]>(initialRows);
  const [isVn, setIsVn] = React.useState<boolean>(true);

  const setQuantity = (rowIndex: number, val: number) =>
    setRows(prev => prev.map((r, i) => (i === rowIndex ? { ...r, quantity: val } : r)));
  const setChanel = (rowIndex: number, val: number) =>
    setRows(prev => prev.map((r, i) => (i === rowIndex ? { ...r, chanel: val } : r)));
  const setUnitPrice = (rowIndex: number, val: number) =>
    setRows(prev => prev.map((r, i) => (i === rowIndex ? { ...r, unitPrice: val } : r)));
  const setTax = (rowIndex: number, val: number) =>
    setRows(prev => prev.map((r, i) => (i === rowIndex ? { ...r, tax: val } : r)));
  const setUnit = (rowIndex: number, val: string) =>
    setRows(prev => prev.map((r, i) => (i === rowIndex ? { ...r, unit: val } : r)));
  const setWaranty = (rowIndex: number, val: string) =>
    setRows(prev => prev.map((r, i) => (i === rowIndex ? { ...r, waranty: val } : r)));
  const setDeliveryTime = (rowIndex: number, val: string) =>
    setRows(prev => prev.map((r, i) => (i === rowIndex ? { ...r, deliveryTime: val } : r)));
  const setDescriptionItem = (rowIndex: number, itemIndex: number, val: string) =>
    setRows(prev => prev.map((r, i) => (i === rowIndex ? {
      ...r,
      itemDescriptions: (r.itemDescriptions ?? []).map((it, j) => j === itemIndex ? { ...it, value: val } : it)
    } : r)));

  // DỮ LIỆU ĐIỀU HƯỚNG: thứ tự hàng và danh sách cột editable
  const dataSource = rows;
  const orderedRowKeys = dataSource.map(r => r.key);

  // Chỉ liệt kê cột editable; cột chỉ có text không đưa vào để focus bỏ qua.
  const editableColKeysInOrder = [
    "itemDescription",
    "unit",
    "quantity",
    "chanel",
    "unitPrice",
    "tax",
    "waranty",
    "deliveryTime",
  ];

  // UI: Định nghĩa cột. Cột editable render input tùy chỉnh, cột text là hiển thị tĩnh.
  const columns: ColumnsType<Row> = [
    { title: "Index", dataIndex: "key", width: 70, render: (_: any, __: Row, rowIndex) => rowIndex + 1 },
    {
      title: "Item description",
      dataIndex: "itemDescriptions",
      width: 320,
      render: (_: any, record: Row, rowIndex: number) => (
        <DescriptionCell
          rowKey={record.key}
          rowIndex={rowIndex}
          colKey="itemDescription"
          items={record.itemDescriptions ?? []}
          onCommitItem={(itemIdx, v) => setDescriptionItem(rowIndex, itemIdx, v)}
        />
      ),
    },
    {
      title: "Unit",
      dataIndex: "unit",
      width: 100,
      render: (_: any, record: Row, rowIndex: number) => (
        <EditableCell
          value={record.unit ?? ""}
          rowKey={record.key}
          colKey="unit"
          onCommit={(val) => setUnit(rowIndex, val)}
        />
      ),
    },
    {
      title: "Quantity",
      dataIndex: "quantity",
      width: 120,
      render: (_: any, record: Row, rowIndex: number) => (
        <NumericEditable
          value={record.quantity ?? 0}
          rowKey={record.key}
          colKey="quantity"
          onCommit={(val) => setQuantity(rowIndex, val)}
        />
      ),
    },
    {
      title: "Chanels",
      dataIndex: "chanel",
      width: 120,
      render: (_: any, record: Row, rowIndex: number) => (
        <NumericEditable
          value={record.chanel ?? 0}
          rowKey={record.key}
          colKey="chanel"
          onCommit={(val) => setChanel(rowIndex, val)}
        />
      ),
    },
    // mock dynamic text-only columns generated by generateDynamicColumns
    {
      title: "Color",
      dataIndex: "color",
      width: 120,
      render: () => <span>Warm White</span>,
    },
    {
      title: "Dimension",
      dataIndex: "dimension",
      width: 160,
      render: () => <span>1000 x 200 x 50</span>,
    },
    {
      title: `Unit price (${isVn ? 'VND' : 'USD'})`,
      dataIndex: "unitPrice",
      width: 160,
      render: (_: any, record: Row, rowIndex: number) => (
        <MoneyEditable
          value={record.unitPrice ?? 0}
          isVN={isVn}
          rowKey={record.key}
          colKey="unitPrice"
          onCommit={(val) => setUnitPrice(rowIndex, val)}
        />
      ),
    },
    {
      title: "VAT Rate (%)",
      dataIndex: "tax",
      width: 140,
      render: (_: any, record: Row, rowIndex: number) => (
        <NumericEditable
          value={record.tax ?? 0}
          rowKey={record.key}
          colKey="tax"
          onCommit={(val) => setTax(rowIndex, val)}
        />
      ),
    },
    {
      title: "Waranty",
      dataIndex: "waranty",
      width: 140,
      render: (_: any, record: Row, rowIndex: number) => (
        <EditableCell
          value={record.waranty ?? ""}
          rowKey={record.key}
          colKey="waranty"
          onCommit={(val) => setWaranty(rowIndex, val)}
        />
      ),
    },
    {
      title: "Delivery time",
      dataIndex: "deliveryTime",
      width: 160,
      render: (_: any, record: Row, rowIndex: number) => (
        <EditableCell
          value={record.deliveryTime ?? ""}
          rowKey={record.key}
          colKey="deliveryTime"
          onCommit={(val) => setDeliveryTime(rowIndex, val)}
        />
      ),
    },
  ];

  return (
    <div style={{ padding: 24 }}>
      <div style={{ marginBottom: 12 }}>
        <span style={{ marginRight: 8 }}>Currency:</span>
        <Switch
          checkedChildren="VND"
          unCheckedChildren="USD"
          checked={isVn}
          onChange={setIsVn}
        />
      </div>
      <NavigationContext.Provider value={{ orderedRowKeys, editableColKeysInOrder }}>
        <Table columns={columns} dataSource={dataSource} rowKey="key" pagination={false} bordered />
      </NavigationContext.Provider>
      <div style={{ marginTop: 12, color: "#666" }}>
        Enter = Commit + Move next | Tab = Revert + Move next | Blur = Commit
      </div>
    </div>
  );
}
